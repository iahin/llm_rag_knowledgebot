[
    {
        "label": "OllamaLLM",
        "importPath": "langchain_ollama.llms",
        "description": "langchain_ollama.llms",
        "isExtraImport": true,
        "detail": "langchain_ollama.llms",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "retriever",
        "importPath": "vector",
        "description": "vector",
        "isExtraImport": true,
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "OllamaEmbeddings",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "Chroma",
        "importPath": "langchain_chroma",
        "description": "langchain_chroma",
        "isExtraImport": true,
        "detail": "langchain_chroma",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "model = OllamaLLM(model=\"llama3.2\", temperature=0)\ntemplate = \"\"\"\nYou are an expert in answering question about a pizza restaurent.\nHere are some relevant reviews: {reviews}\nhere is the question to answer: {question}\n\"\"\"\nprompt = ChatPromptTemplate.from_template(template)\nchain = prompt | model\nwhile True:\n    print(\"--------------------------------\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "template = \"\"\"\nYou are an expert in answering question about a pizza restaurent.\nHere are some relevant reviews: {reviews}\nhere is the question to answer: {question}\n\"\"\"\nprompt = ChatPromptTemplate.from_template(template)\nchain = prompt | model\nwhile True:\n    print(\"--------------------------------\")\n    question = input(\"Please enter your question about the pizza restaurant (or type 'exit' to quit): \")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "prompt = ChatPromptTemplate.from_template(template)\nchain = prompt | model\nwhile True:\n    print(\"--------------------------------\")\n    question = input(\"Please enter your question about the pizza restaurant (or type 'exit' to quit): \")\n    print(\"\\n\\n\")\n    if question.lower() == 'exit':\n        break\n    reviews = retriever.invoke(question)\n    result = chain.invoke({",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "chain",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "chain = prompt | model\nwhile True:\n    print(\"--------------------------------\")\n    question = input(\"Please enter your question about the pizza restaurant (or type 'exit' to quit): \")\n    print(\"\\n\\n\")\n    if question.lower() == 'exit':\n        break\n    reviews = retriever.invoke(question)\n    result = chain.invoke({\n        \"reviews\": reviews, ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent\nCSV_PATH = BASE_DIR / \"data\" / \"realistic_restaurant_reviews.csv\"\nDB_DIR = BASE_DIR / \"chroma_db\"\ndf = pd.read_csv(CSV_PATH)\nembeddings = OllamaEmbeddings(model=\"mxbai-embed-large\")\ndb_location = DB_DIR\nadd_documents = not os.path.exists(db_location)\nif add_documents:\n    documents = []\n    ids = []",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "CSV_PATH",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "CSV_PATH = BASE_DIR / \"data\" / \"realistic_restaurant_reviews.csv\"\nDB_DIR = BASE_DIR / \"chroma_db\"\ndf = pd.read_csv(CSV_PATH)\nembeddings = OllamaEmbeddings(model=\"mxbai-embed-large\")\ndb_location = DB_DIR\nadd_documents = not os.path.exists(db_location)\nif add_documents:\n    documents = []\n    ids = []\n    for index, row in df.iterrows():",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "DB_DIR",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "DB_DIR = BASE_DIR / \"chroma_db\"\ndf = pd.read_csv(CSV_PATH)\nembeddings = OllamaEmbeddings(model=\"mxbai-embed-large\")\ndb_location = DB_DIR\nadd_documents = not os.path.exists(db_location)\nif add_documents:\n    documents = []\n    ids = []\n    for index, row in df.iterrows():\n        document = Document(",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "df = pd.read_csv(CSV_PATH)\nembeddings = OllamaEmbeddings(model=\"mxbai-embed-large\")\ndb_location = DB_DIR\nadd_documents = not os.path.exists(db_location)\nif add_documents:\n    documents = []\n    ids = []\n    for index, row in df.iterrows():\n        document = Document(\n            page_content=row[\"Title\"] + \"\\n\" +",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "embeddings = OllamaEmbeddings(model=\"mxbai-embed-large\")\ndb_location = DB_DIR\nadd_documents = not os.path.exists(db_location)\nif add_documents:\n    documents = []\n    ids = []\n    for index, row in df.iterrows():\n        document = Document(\n            page_content=row[\"Title\"] + \"\\n\" +\n            row[\"Review\"] + \" rating is \" + str(row[\"Rating\"]),",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "db_location",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "db_location = DB_DIR\nadd_documents = not os.path.exists(db_location)\nif add_documents:\n    documents = []\n    ids = []\n    for index, row in df.iterrows():\n        document = Document(\n            page_content=row[\"Title\"] + \"\\n\" +\n            row[\"Review\"] + \" rating is \" + str(row[\"Rating\"]),\n            metadata={\"rating\": row[\"Rating\"], \"date\": row[\"Date\"]},",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "add_documents",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "add_documents = not os.path.exists(db_location)\nif add_documents:\n    documents = []\n    ids = []\n    for index, row in df.iterrows():\n        document = Document(\n            page_content=row[\"Title\"] + \"\\n\" +\n            row[\"Review\"] + \" rating is \" + str(row[\"Rating\"]),\n            metadata={\"rating\": row[\"Rating\"], \"date\": row[\"Date\"]},\n            id=str(index)",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "vector_store",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "vector_store = Chroma(\n    collection_name=\"pizza_reviews\",\n    persist_directory=db_location,\n    embedding_function=embeddings\n)\nif add_documents:\n    vector_store.add_documents(documents=documents, ids=ids)\nretriever = vector_store.as_retriever(\n    search_type=\"similarity\",  # search algorithm\n    search_kwargs={\"k\": 5},  # number of relevent docs to return",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "retriever",
        "kind": 5,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "retriever = vector_store.as_retriever(\n    search_type=\"similarity\",  # search algorithm\n    search_kwargs={\"k\": 5},  # number of relevent docs to return\n)\n# results = retriever.invoke(\"bad review dont like \")\n# for r in results:\n#     print(r)",
        "detail": "vector",
        "documentation": {}
    }
]